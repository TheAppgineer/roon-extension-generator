#!/bin/bash
source common.sh

generate_gitignore() {
    echo Appending .gitignore file
    cat << EOF >> out/$NAME/.gitignore
.reg/bin
.reg/etc
EOF
}

generate_readme_md() {
    if [ ! -f "out/$NAME/README.md" ]; then
        echo Generating README.md
        cat << EOF > out/$NAME/README.md
# $NAME
$DESCRIPTION
EOF
    fi
}

generate_package_json() {
    if [ ! -f "out/$NAME/package.json" ]; then
        echo Generating package.json
        cat << EOF > out/$NAME/package.json
{
    "name": "$NAME",
    "version": "$VERSION",
    "description": "$DESCRIPTION",
    "author": "$AUTHOR",
    "license": "Apache-2.0",
    "main": "$MAIN_FILE",
    "dependencies": {
        "node-roon-api": "github:roonlabs/node-roon-api"
    }
}
EOF
    fi
}

generate_app_js() {
    if [ ! -f "out/$NAME/$MAIN_FILE" ]; then
        echo Generating $MAIN_FILE
        cat << EOF > out/$NAME/$MAIN_FILE
// The bare minimum $MAIN_FILE file for a Roon extension
// Generated by the Roon Extension Generator

"use strict";

const RoonApi = require('node-roon-api');

var roon = new RoonApi({
    extension_id:        '$EXTENSION_ID',
    display_name:        '$FRIENDLY_NAME',
    display_version:     '$VERSION',
    publisher:           '$AUTHOR',
    email:               '$EMAIL',
    website:             '$WEBSITE',

    core_paired: function(core) {
    },
    core_unpaired: function(core) {
    }
});

roon.init_services({
    required_services: [  ],
    provided_services: [  ]
});

roon.start_discovery();
EOF
    else
        echo Appending $MAIN_FILE
    fi

    cat << EOF >> out/$NAME/$MAIN_FILE

function init_signal_handlers() {
    const handle = function(signal) {
        process.exit(0);
    };

    // Register signal handlers to enable a graceful stop of the container
    process.on('SIGTERM', handle);
    process.on('SIGINT', handle);
}

// Place the init_signal_handlers call in the initialization part of your code
init_signal_handlers();
EOF
}

generate_dockerfile() {
    echo Generating Dockerfile
    cat << EOF > out/$NAME/Dockerfile
# Use an official node runtime as a parent image
FROM node:12.16.3-alpine

COPY $MAIN_FILE package.json LICENSE /home/node/

WORKDIR /home/node

RUN apk add --no-cache git && npm install && apk del git

USER node

CMD [ "node", "." ]
EOF
}

source_settings $1

TAG=$(docker version --format '{{.Server.Arch}}')

if [ "$USER" = "" ]; then
    IMAGE=$NAME
else
    IMAGE=$USER/$NAME
fi

mkdir -p out/$NAME/.reg

generate_gitignore
generate_readme_md
generate_package_json
generate_app_js
generate_dockerfile

if [ ! -f "out/$NAME/LICENSE" ]; then
    cp LICENSE out/$NAME/
fi

if [ ! -f "out/$NAME/.reg/settings" ]; then
    cp settings out/$NAME/.reg/
fi
